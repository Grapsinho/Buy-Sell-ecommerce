


from django.db import models
from django.contrib.auth.models import User
from mptt.models import MPTTModel, TreeForeignKey

# Optional: Define product condition choices.
CONDITION_CHOICES = (
    ('new', 'New'),
    ('used', 'Used'),
    ('refurbished', 'Refurbished'),
)

# ----------------------------------------------------------------------
# Category Model (Hierarchical via MPTT)
# ----------------------------------------------------------------------
class Category(MPTTModel):
    name = models.CharField(max_length=100)
    slug = models.SlugField(unique=True)
    parent = TreeForeignKey(
        'self', on_delete=models.CASCADE,
        null=True, blank=True,
        related_name='children'
    )

    class MPTTMeta:
        order_insertion_by = ['name']

    class Meta:
        verbose_name_plural = 'Categories'

    def __str__(self):
        return self.name

# ----------------------------------------------------------------------
# Product Model
# ----------------------------------------------------------------------
class Product(models.Model):
    seller = models.ForeignKey(
        User, on_delete=models.CASCADE, related_name='products'
    )
    name = models.CharField(max_length=255)
    description = models.TextField()
    slug = models.SlugField(unique=True)
    is_active = models.BooleanField(default=True)

    # Inventory and pricing details
    price = models.DecimalField(max_digits=10, decimal_places=2)
    retail_price = models.DecimalField(
        max_digits=10, decimal_places=2, null=True, blank=True
    )
    stock = models.PositiveIntegerField(default=0)
    units_sold = models.PositiveIntegerField(default=0)  # <-- New Field
    condition = models.CharField(
        max_length=20, choices=CONDITION_CHOICES, default='new'
    )

    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    categories = models.ManyToManyField(
        Category, through='ProductCategory', related_name='products'
    )

    def __str__(self):
        return self.name

# ----------------------------------------------------------------------
# Product-Category Linking Table
# ----------------------------------------------------------------------
class ProductCategory(models.Model):
    product = models.ForeignKey(Product, on_delete=models.CASCADE)
    category = models.ForeignKey(Category, on_delete=models.CASCADE)

    class Meta:
        unique_together = ('product', 'category')
        verbose_name = 'Product Category'
        verbose_name_plural = 'Product Categories'

    def __str__(self):
        return f"{self.product.name} in {self.category.name}"

# ----------------------------------------------------------------------
# Product Media Model (up to 6 photos per product)
# ----------------------------------------------------------------------
class ProductMedia(models.Model):
    product = models.ForeignKey(
        Product, on_delete=models.CASCADE, related_name='media'
    )
    image = models.ImageField(upload_to='products/')
    is_feature = models.BooleanField(default=False)
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Media for {self.product.name} - {'Featured' if self.is_feature else 'Gallery'}"




